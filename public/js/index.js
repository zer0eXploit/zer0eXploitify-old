window.onSpotifyWebPlaybackSDKReady = () => {
  const token = location.hash.split("=")[1];
  let playerName;
  history.replaceState(null, null, " ");
  // Fill User Profile
  fetch("https://api.spotify.com/v1/me", {
    method: "GET",
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })
    .then((res) => {
      if (String(res.status)[0] === "4") {
        $(".ui.basic.modal").modal("show");
        throw new Error("HTTP 4xx Error!");
      } else {
        return res.json();
      }
    })
    .then((data) => {
      playerName = data.display_name + "'s Web Player";
      document.getElementById("avarter").src = data.images[0].url;
      document.getElementById("username").innerText = data.display_name;
      document.getElementById("username-href").href = "#username";
      document.getElementById("email").innerText = data.email;
      document.getElementById("player-name").innerText =
        "Yan's Spotify Web Player";
    })
    .then(() => {
      const player = new Spotify.Player({
        name: playerName,
        getOAuthToken: (cb) => {
          cb(token);
        },
      });

      // Next Track
      document.getElementById("next").addEventListener("click", () => {
        player.nextTrack().then(() => {
          console.log("Skipped to next track!");
        });
      });

      // Prev Track
      document.getElementById("prev").addEventListener("click", () => {
        player.previousTrack().then(() => {
          console.log("Skipped to previous track!");
        });
      });

      // Toggle Playback
      document
        .getElementById("toggle-playback")
        .addEventListener("click", () => {
          const playbackClasses = document.getElementById(
            "toggle-playback-icon"
          ).classList.length;

          if (playbackClasses === 3) {
            player.resume().then(() => {
              document
                .getElementById("toggle-playback-icon")
                .classList.remove("play");
              console.log("Resumed playback!");
            });
          } else {
            player.pause().then(() => {
              document
                .getElementById("toggle-playback-icon")
                .classList.add("play");
              console.log("Paused playback!");
            });
          }
        });

      // Error handling
      player.addListener("initialization_error", ({ message }) => {
        console.error(message);
      });
      player.addListener("authentication_error", ({ message }) => {
        $(".ui.basic.modal").modal("show");
        console.error(message);
      });
      player.addListener("account_error", ({ message }) => {
        console.error(message);
      });
      player.addListener("playback_error", ({ message }) => {
        console.error(message);
      });

      // Playback status updates
      player.addListener("player_state_changed", (state) => {
        const { position, duration, paused } = state;

        // Toggle play pause buttons
        if (paused) {
          document.getElementById("toggle-playback-icon").classList.add("play");
        } else {
          document
            .getElementById("toggle-playback-icon")
            .classList.remove("play");
        }
        let albumArt = state.track_window.current_track.album.images[2].url;
        let title = state.track_window.current_track.name;
        let artists = state.track_window.current_track.artists.map((artist) => {
          return artist.name;
        });
        let album = state.track_window.current_track.album.name;

        // Update Progress
        calculatePercentage(position, duration);

        // Update Player
        if (title !== document.getElementById("title").innerText) {
          document.getElementById("album-art").src = albumArt;
          document.getElementById("album").innerText = album;
          document.getElementById("title").innerText = title;
          document.getElementById("artists").innerText = artists.join(" - ");
          setVibrantColor(albumArt);
        }
      });

      // Ready
      player.addListener("ready", ({ device_id }) => {
        console.log("Ready with Device ID", device_id);
      });

      // Not Ready
      player.addListener("not_ready", ({ device_id }) => {
        console.log("Device ID has gone offline", device_id);
      });

      // Connect to the player!
      player.connect();
    })
    .catch((error) => {
      console.log(error.message);
    });
};

const calculatePercentage = (positionNow, totalDuration) => {
  progressUpdate((positionNow / totalDuration) * 100);
};

const progressUpdate = (percentage) => {
  $("#playback-progress").progress({
    percent: Math.floor(percentage),
  });
};

const setVibrantColor = (image) => {
  Vibrant.from(image).getPalette((err, palette) => {
    if (!err) {
      //console.log(palette.Vibrant.hex);
      document.querySelector(
        "body"
      ).style.backgroundImage = `linear-gradient(to bottom, ${palette.Muted.hex}, ${palette.DarkMuted.hex} )`;
    } else {
      return "#fffff";
    }
  });
};

// Notify the user of unresponsiveness
let timesToShow = 0;
const resizeHandler = () => {
  if (document.body.clientWidth < 780) {
    $(".mini.modal").modal("show");

    timesToShow++;

    if (timesToShow > 3) {
      // only show the alert twice
      window.removeEventListener("resize", resizeHandler);
    }
  }
};

window.addEventListener("resize", resizeHandler);
